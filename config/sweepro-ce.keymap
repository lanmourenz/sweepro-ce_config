/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define COLEMAK 1
#define NUM     2
#define SYM     3
#define FUN     4

/ {
    // macros

    macros {
        ZMK_MACRO(hello,// hello world
        wait-ms = <0>;
        tap-ms = <10>;
        bindings =
            <&kp LS(H) &kp E &kp L &kp L &kp O>,
            <&kp COMMA>,
            <&kp W &kp O &kp R &kp L &kp D &kp EXCL>;

        )

      ZMK_MACRO(

        encoder, = // for encoder switch press;;;;;
        wait-ms = <0>;
        tap-ms = <10>;
        bindings =
            <&kp LS(I) &kp SPACE &kp A &kp M &kp SPACE &kp A &kp SPACE>,
            <&kp E &kp N &kp C &kp O &kp D &kp E &kp R>;

        )

      ZMK_MACRO(

        spc1, = // for spacemacs window nav, Alt+M+1;;;;;
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LA(M) &kp N1>;

        )
    
      ZMK_MACRO(

        spc2,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LA(M) &kp N2>;

        )
    
      ZMK_MACRO(

        spc3,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LA(M) &kp N3>;

        )

      ZMK_MACRO(

        spc4,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LA(M) &kp N4>;

        )

      ZMK_MACRO(

        nxt_tab,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LC(TAB)>;

        )

      ZMK_MACRO(

        prv_tab,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LC(LS(TAB))>;

        )
    };

    // custom shift using mod-morph 

    behaviors {
    };

    // combos

    combos {
        compatible = "zmk,combos";

        // right hand 
        // left hand 
        // symbols
        // toggles
        // output selection
        // combo_outusb {
        //     timeout-ms = <50>;
        //     key-positions = <4 14>;
        //     bindings = <&out OUT_USB>;
        // };
        // ble selection
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
      &kp Q      &kp W      &kp E      &kp R      &kp T      &kp Y  &kp U      &kp I    &kp O     &kp P
      &kp A      &kp S      &kp D      &kp F      &kp G      &kp H  &kp J      &kp K    &kp L  &kp SEMI
      &kp Z      &kp X      &kp C      &kp V      &kp B      &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH
  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
            >;
        };
    };
};
