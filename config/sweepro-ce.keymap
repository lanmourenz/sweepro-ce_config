/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

#define DEFAULT 0
#define COLEMAK 1
#define NUM     2
#define SYM     3
#define FUN     4

#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <120>;
            layers = <0>;
        };

        Bs {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            timeout-ms = <120>;
            layers = <0>;
        };

        Win {
            bindings = <&kp LCMD>;
            key-positions = <32 31>;
            timeout-ms = <120>;
            layers = <0>;
        };

        lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <11 12>;
            layers = <0>;
            timeout-ms = <120>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <12 13>;
            timeout-ms = <120>;
            layers = <0>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <20 21>;
            timeout-ms = <120>;
        };

        rshift {
            bindings = <&kp RSHIFT>;
            key-positions = <28 29>;
            timeout-ms = <120>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
  &kp Q      &kp W        &kp E        &kp R        &kp T          &kp Y            &kp U  &kp I      &kp O    &kp P
  &kp A      &kp S        &kp D        &kp F        &kp G          &kp H            &kp J  &kp K      &kp L    &kp ENTER
  &kp Z      &kp X        &kp C        &kp V        &kp B          &kp N            &kp M  &kp COMMA  &kp DOT  &kp QUESTION
  &kp LG(E)  &lt 1 SPACE  &lt 2 SPACE  &lt 1 SPACE  &kp BACKSPACE  &kp LC(LS(ESC))
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp UP DOWN>;
        };

        NUM {
            bindings = <
  &kp N1        &kp N2  &kp N3  &kp N4  &kp N5         &kp N6            &kp N7             &kp N8     &kp N9     &kp N0
  &kp CAPSLOCK  &trans  &trans  &mo 4   &kp C_AL_CALC  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS  &kp EQUAL  &trans
  &kp LSHFT     &trans  &trans  &trans  &trans         &trans            &trans             &trans     &trans     &kp LSHFT
  &trans        &trans  &trans  &trans  &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        SYM {
            bindings = <
  &kp LG(D)      &trans    &trans          &trans           &trans  &trans  &trans          &trans          &trans           &trans
  &trans         &trans    &kp UP_ARROW    &mo 3            &trans  &trans  &trans          &kp UP_ARROW    &trans           &trans
  &kp LA(LC(A))  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
  &trans         &trans    &trans          &trans           &trans  &trans
            >;
        };

        FUN {
            bindings = <
  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
  &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &kp LA(LC(D))  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans         &trans  &trans  &trans
            >;
        };
    };
};
